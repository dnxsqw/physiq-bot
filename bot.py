import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

from menu import main_menu
from profile import router as profile_router, user_profiles

from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(profile_router)  # FSM-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

# –°—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id not in user_profiles:
        kb = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]],
            resize_keyboard=True
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PhysIQ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            reply_markup=kb
        )
    else:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_profiles[user_id]['first_name']}!",
            reply_markup=main_menu
        )

# ‚õî fallback ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ FSM
@dp.message(StateFilter(default_state))
async def fallback(message: types.Message):
    await message.answer("üëÄ –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ /start.")

# Webhook
async def on_startup(dispatcher: Dispatcher):
    print("üì° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook...")
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()

# –ó–∞–ø—É—Å–∫ –Ω–∞ Render
app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
setup_application(app, dp, on_startup=on_startup, on_shutdown=on_shutdown)

if __name__ == "__main__":
    web.run_app(app, port=10000)
