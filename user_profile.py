import json
import os
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from oauth2client.service_account import ServiceAccountCredentials
import gspread

router = Router()

USERS_FILE = "users.json"
GOOGLE_JSON_KEYFILE = "physiq-bot-bb4835247b64.json"
GOOGLE_SHEET_NAME = "PhysIQ Users"

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    first_name = State()
    last_name = State()
    city = State()
    school = State()
    class_num = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
def load_profiles():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
def save_profiles(profiles):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(profiles, f, ensure_ascii=False, indent=2)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —à–∫–æ–ª
def normalize_school_name(name: str) -> str:
    name = name.lower()
    name = name.replace("—Ä—Ñ–º—à", "—Ä—Ñ–º—à").replace("–≥.", "").replace("–≥–æ—Ä–æ–¥", "")
    name = name.replace("–∞—Å—Ç–∞–Ω–∞", "–∞—Å—Ç–∞–Ω–∞").replace("–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω", "–∞—Å—Ç–∞–Ω–∞")
    return name.strip().title()

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
user_profiles = load_profiles()

# –ö–æ–º–∞–Ω–¥–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.message(F.text.lower() == "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—ë **–∏–º—è**:")
    await state.set_state(Registration.first_name)

@router.message(Registration.first_name)
async def reg_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.last_name)

@router.message(Registration.last_name)
async def reg_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–¢–≤–æ–π –≥–æ—Ä–æ–¥:")
    await state.set_state(Registration.city)

@router.message(Registration.city)
async def reg_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã:")
    await state.set_state(Registration.school)

@router.message(Registration.school)
async def reg_school(message: types.Message, state: FSMContext):
    await state.update_data(school=message.text)
    await message.answer("–ö–ª–∞—Å—Å:")
    await state.set_state(Registration.class_num)

@router.message(Registration.class_num)
async def finish_registration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = str(message.from_user.id)
    username = message.from_user.username or "‚Äî"

    profile = {
        "username": username,
        "first_name": data["first_name"],
        "last_name": data["last_name"],
        "city": data["city"],
        "school": data["school"],
        "normalized_school": normalize_school_name(data["school"]),
        "class": data["class_num"],
        "manuls": 0,
        "streak": 0,
        "solved": 0,
        "achievements": []
    }

    user_profiles[user_id] = profile
    save_profiles(user_profiles)
    print(f"[DEBUG] –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {profile}")

    try:
        sync_to_google(user_id)
        print("[Google Sync] ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"[Google Sync Error] ‚ùå {e}")

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–ø–∏—à–∏ ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ.")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞: –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
@router.message(F.text.lower() == "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_profiles:
        await message.answer("üîπ –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª!")
        return

    p = user_profiles[user_id]
    profile_text = (
        f"üë§ <b>{p['first_name']} {p['last_name']}</b>\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {p['city']}\n"
        f"üè´ <b>–®–∫–æ–ª–∞:</b> {p['school']}\n"
        f"üéì <b>–ö–ª–∞—Å—Å:</b> {p['class']}\n"
        f"\nüìà <b>–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á:</b> {p['solved']}\n"
        f"üî• <b>–°—Ç—Ä–∏–∫:</b> {p['streak']}\n"
        f"ü¶ä <b>–ú–∞–Ω—É–ª—ã:</b> {p['manuls']}"
    )
    await message.answer(profile_text, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google –¢–∞–±–ª–∏—Ü–µ–π
def sync_to_google(user_id):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_JSON_KEYFILE, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1

    user = user_profiles[user_id]
    username = user.get("username", "‚Äî")
    normalized_school = user.get("normalized_school", "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing = sheet.findall(str(user_id))
    if not existing:
        row = [
            user_id,
            username,
            user["first_name"],
            user["last_name"],
            user["city"],
            user["school"],
            normalized_school,
            user["class"],
            user["manuls"],
            user["streak"],
            user["solved"]
        ]
        sheet.append_row(row)
